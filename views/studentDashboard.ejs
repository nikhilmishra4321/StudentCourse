<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Student Dashboard</title>
  <!-- Embedded CSS -->
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 20px;
    }
    .card {
      border: 1px solid #ddd;
      padding: 20px;
      width: 300px;
      margin-top: 20px;
      background-color: #f9f9f9;
      border-radius: 8px;
    }
    .card h3 {
      text-align: center;
      color: #333;
    }
    .card p {
      text-align: center;
      color: #555;
    }
    .lesson {
      font-size: 14px;
      color: #777;
      padding-left: 20px;
    }
    .chapter {
      font-weight: bold;
      margin-top: 10px;
    }
  </style>
</head>
<body>
  <h1>Welcome to the Student Dashboard</h1>
  <div id="course-container">
  </div>
  <script>
    async function getCourseData() {
      try {
        const response = await fetch('https://api-ignite.hopingminds.com/api/v1/getAllCourses');
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        const data = await response.json();
        console.log(data);  
        if (data.success && data.courses && data.courses.length > 0) {
          data.courses.forEach(course => {
            const card = document.createElement('div');
            card.classList.add('card');
            const courseTitle = document.createElement('h3');
            courseTitle.textContent = course.title || 'Course Title Not Available';
            const courseDescription = document.createElement('p');
            courseDescription.textContent = course.curriculum && course.curriculum.length > 0
              ? `Curriculum:`
              : 'No curriculum available';
            card.appendChild(courseTitle);
            card.appendChild(courseDescription);
            if (course.curriculum && course.curriculum.length > 0) {
              course.curriculum.forEach(chapter => {
                const chapterElement = document.createElement('div');
                chapterElement.classList.add('chapter');
                chapterElement.textContent = `Chapter: ${chapter.chapter_name}`;
                card.appendChild(chapterElement);
                if (chapter.lessons && chapter.lessons.length > 0) {
                  chapter.lessons.forEach(lesson => {
                    const lessonElement = document.createElement('p');
                    lessonElement.classList.add('lesson');
                    lessonElement.textContent = `Lesson: ${lesson.lesson_name}`;
                    card.appendChild(lessonElement);
                  });
                } else {
                  const noLessons = document.createElement('p');
                  noLessons.classList.add('lesson');
                  noLessons.textContent = 'No lessons available';
                  card.appendChild(noLessons);
                }
              });
            }
            document.getElementById('course-container').appendChild(card);
          });
        } else {
          console.warn('No courses available or invalid data');
        }
      } catch (error) {
        console.error('Error fetching course data:', error);
        document.getElementById('course-container').innerHTML = 'Error fetching course data. Please try again later.';
      }
    }
    window.onload = getCourseData;
  </script>
</body>
</html>
